name: Deploiment
on:
  push:
    branches:
      - main
      - develop

jobs:
  unit-tests-frontend :
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node 16.x
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Run unit test backend
        working-directory: .
        run: |
          cd frontend 
          npm install
          CI= npm test
        
  unit-tests-backend :
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis
        options: >-
            --health-cmd "redis-cli ping"
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5
        ports:
          - 6379:6379
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: test
          POSTGRES_PASSWORD: test
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node 16.x
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Run unit test backend
        working-directory: .
        run: |
          cd backend 
          npm install
          CI= npm run test
        
        env:
          # El nombre del host utilizado para comunicarse con el contenedor de servicio Redis
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379
          DEFAULT_EXPIRATION_REDIS: 3600

  integration-test :
    runs-on: ubuntu-latest
    needs: [unit-tests-backend, unit-tests-frontend]
    services:
      redis:
        image: redis
        options: >-
            --health-cmd "redis-cli ping"
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5
        ports:
          - 6379:6379
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: test
          POSTGRES_PASSWORD: test
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node 16.x
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Run integration
        working-directory: .
        run: |
          cd backend
          npm install
          CI= npm run test_integration
        env:
          # El nombre del host utilizado para comunicarse con el contenedor de servicio Redis
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379
          DEFAULT_EXPIRATION_REDIS: 3600
          TOKEN_TEST:  ${{ secrets.TOKEN_TEST }}
          TOKEN_SECRET:  ${{ secrets.TOKEN_SECRET }}

  VPS-deploiement:
    runs-on: ubuntu-latest
    needs: [integration-test]
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node 16.x
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Build application
        working-directory: .
        run: |
          cd frontend 
          npm install
          CI= npm run build
          cd ..
          cd scripts
          chmod +x build.sh
          ./build.sh

      - name: Application folder to remote
        uses: garygrossgarten/github-action-scp@release
        with:
          local: Application
          remote: Application
          host: ${{ secrets.VPS_HOST }}
          port: ${{ secrets.VPS_PORT}}
          username: ${{ secrets.VPS_USER }}
          privateKey: ${{ secrets.VPS_PRIVATEKEY }}

      - name: Restart services
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          port: ${{ secrets.VPS_PORT}}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_PRIVATEKEY }}
          script: |
            cp .env Application/www/backend
            cp .env Application
            cd Application
            docker stop app
            docker rm app
            docker rmi node:16
            docker-compose up -d
            